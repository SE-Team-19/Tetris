/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'org.sonarqube' version '3.3'
    id 'jacoco'
    id 'edu.sc.seis.launch4j' version '2.5.3'
}

sonarqube {
    properties {
        property "sonar.projectKey", "SE-Team-19_Tetris"
        property "sonar.organization", "se-team-19"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

jacoco {
    toolVersion = '0.8.7'
}

launch4j {
  mainClassName = 'app/src/main/java/tetris/App.java'
  icon = "${projectDir}/icons/myApp.ico"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.6.0',
        'org.assertj:assertj-core:3.20.2',
        'org.assertj:assertj-swing-junit:3.9.2',
        'org.assertj:assertj-swing-jide:3.9.0'
    )
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    // This dependency is used by the application.
    implementation('com.google.guava:guava:31.1-jre',
        'com.google.code.gson:gson:2.9.0'
    )
}

application {
    // Define the main class for the application.
    mainClass = 'tetris.App'
}

test {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()

    finalizedBy('jacocoTestReport')
    finalizedBy('jacocoTestCoverageVerification')
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'

            // limit {
            //     counter = 'LINE'
            //     value = 'COVEREDRATIO'
            //     minimum = 0.80
            // }

            // limit {
            //     counter = 'BRANCH'
            //     value = 'COVEREDRATIO'
            //     minimum = 0.80
            // }
        }
    }
}

task testCoverage(type: Test) {
    group 'verification'
    description 'Runs the unit tests with coverage'

    dependsOn('test', 'jacocoTestReport', 'jacocoTestCoverageVerification')

    tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
    tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}

compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}